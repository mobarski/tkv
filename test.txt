### test_count: 246

# test_main_api
	
	>>> db.drop('a')
	>>> db.drop('b')
	>>> db.drop('c')
	>>> db.drop('d')
	>>> 'a' in db.tables()
	False
	>>> 'b' in db.tables()
	False
	>>> 'c' in db.tables()
	False
	>>> 'd' in db.tables()
	False
	
	>>> db.size('a')
	0
	>>> db.size('b')
	0
	
	>>> db.put('a','x',1)
	>>> db.put('a','y',2)
	>>> db.put('a','z',3)

	>>> db.put('b','r',11)
	>>> db.put('b','s',22)

	>>> db.get('a','x')
	1
	>>> db.get('a','y')
	2
	>>> db.get('a','z')
	3
	>>> db.get('b','r')
	11
	>>> db.get('b','s')
	22
	>>> db.get('a','v',-1)
	-1
	>>> db.get('c','v',-1)
	-1

	>>> db.has('a','x')
	True
	>>> db.has('a','v')
	False
	>>> db.has('c','v')
	False

	>>> db.count('a')
	3
	>>> db.count('b')
	2

	>>> db.get_many('a',['x','y','z']) == [1,2,3]
	True
	>>> db.get_many('b',['r','s','t'],-1) == [11,22,-1]
	True

	>>> 'a' in db.tables()
	True
	>>> 'b' in db.tables()
	True
	>>> 'c' in db.tables()
	False

	>>> set(db.keys('a')) == set('xyz')
	True
	>>> set(db.keys('b')) == set('rs')
	True
	>>> set(db.keys('a', limit=2, sort=True)) == set('xy')
	True
	>>> set(db.keys('b', limit=3, sort=True)) == set('rs')
	True

	>>> list(db.items('a', sort=True))
	[('x', 1), ('y', 2), ('z', 3)]
	>>> list(db.items('a', sort=True, limit=1))
	[('x', 1)]

	>>> db.put_many('c', ['u','v'], ['one','two'])
	>>> db.get('c','u')
	'one'
	>>> db.get('c','v')
	'two'
	
	>>> sorted(db.values('c')) == ['one','two']
	True
	>>> list(db.values('c', limit=1, sort=True))
	['one']

	>>> db.put_items('d', [('one',1), ('two',2), ('three',3)])
	>>> db.get('d','one')
	1
	>>> db.get('d','two')
	2
	>>> sorted(db.get_items('d',['one','two','foo'],default=-1)) == [('foo',-1),('one',1),('two',2)]
	True
	
	>>> db.size('d') > 0
	True

# test_table_api

	>>> t1 = db.table('aa')
	>>> t2 = db.table('bb')
	
	>>> t1.put('x',1)
	>>> t1.put('y',2)
	>>> t1.put('z',3)

	>>> t2.put('r',11)
	>>> t2.put('s',22)

	>>> t1.get('x') == 1
	True
	>>> t1.get('y') == 2
	True
	>>> t1.get('z') == 3
	True
	>>> t1.get('v',-1) == -1
	True
	>>> t2.get('r') == 11
	True
	>>> t2.get('s') == 22
	True
	
	>>> t1.has('x') == True
	True
	>>> t1.has('v') == False
	True
	
	>>> t1.count() == 3
	True
	>>> t2.count() == 2
	True
	
	>>> t1.get_many(['x','y','z']) == [1,2,3]
	True
	>>> t2.get_many(['r','s','t'],-1) == [11,22,-1]
	True
	
	>>> set(t1.keys()) == set('xyz')
	True
	>>> set(t2.keys()) == set('rs')
	True


# test_scan_patterns

	>>> db.drop('abc')
	>>> tab = db.table('abc')
	
	# shuffled to exclude insertion order dependence
	>>> tab.put('a2/b3/c1', '2.3.1') # 9
	>>> tab.put('a2/b1/c1', '2.1.1') # 6
	>>> tab.put('a1/b2/c1', '1.2.1') # 3
	>>> tab.put('a2/b2/c1', '2.2.1') # 8
	>>> tab.put('a1/b2/c3', '1.2.3') # 5
	>>> tab.put('a1/b1/c1', '1.1.1') # 1
	>>> tab.put('a1/b2/c2', '1.2.2') # 4
	>>> tab.put('a1/b1/c2', '1.1.2') # 2
	>>> tab.put('a2/b1/c2', '2.1.2') # 7
	
	# scan_count
	
	>>> tab.scan_count('a1/b1/*')
	2
	>>> tab.scan_count('a1/b2/*')
	3
	>>> tab.scan_count('a1/*')
	5
	>>> tab.scan_count('a2/*')
	4
	>>> tab.scan_count('a2/b2/*')
	1
	>>> tab.scan_count('a3/*')
	0
	>>> tab.scan_count('*')
	9
	>>> tab.scan_count('*/b1/*')
	4
	>>> tab.scan_count('*/c1')
	5
	>>> tab.scan_count('*/c3')
	1
	>>> tab.scan_count('*/c4')
	0
	
	# scan_values

	>>> list(tab.scan_values('a1/b1/*'))
	['1.1.1', '1.1.2']
	>>> list(tab.scan_values('a1/b2/*'))
	['1.2.1', '1.2.2', '1.2.3']
	>>> list(tab.scan_values('a1/*'))
	['1.1.1', '1.1.2', '1.2.1', '1.2.2', '1.2.3']
	>>> list(tab.scan_values('a2/*'))
	['2.1.1', '2.1.2', '2.2.1', '2.3.1']
	>>> list(tab.scan_values('a2/b2/*'))
	['2.2.1']
	>>> list(tab.scan_values('a3/*'))
	[]
	>>> list(tab.scan_values('*'))
	['1.1.1', '1.1.2', '1.2.1', '1.2.2', '1.2.3', '2.1.1', '2.1.2', '2.2.1', '2.3.1']
	>>> list(tab.scan_values('*/b1/*'))
	['1.1.1', '1.1.2', '2.1.1', '2.1.2']
	>>> list(tab.scan_values('*/c1'))
	['1.1.1', '1.2.1', '2.1.1', '2.2.1', '2.3.1']
	>>> list(tab.scan_values('*/c3'))
	['1.2.3']
	>>> list(tab.scan_values('*/c4'))
	[]

	# scan_keys

	>>> list(tab.scan_keys('a1/b1/*'))
	['a1/b1/c1', 'a1/b1/c2']
	>>> list(tab.scan_keys('a1/b2/*'))
	['a1/b2/c1', 'a1/b2/c2', 'a1/b2/c3']
	>>> list(tab.scan_keys('a1/*'))
	['a1/b1/c1', 'a1/b1/c2', 'a1/b2/c1', 'a1/b2/c2', 'a1/b2/c3']
	>>> list(tab.scan_keys('a2/*'))
	['a2/b1/c1', 'a2/b1/c2', 'a2/b2/c1', 'a2/b3/c1']
	>>> list(tab.scan_keys('a2/b2/*'))
	['a2/b2/c1']
	>>> list(tab.scan_keys('a3/*'))
	[]
	>>> list(tab.scan_keys('*'))
	['a1/b1/c1', 'a1/b1/c2', 'a1/b2/c1', 'a1/b2/c2', 'a1/b2/c3', 'a2/b1/c1', 'a2/b1/c2', 'a2/b2/c1', 'a2/b3/c1']
	>>> list(tab.scan_keys('*/b1/*'))
	['a1/b1/c1', 'a1/b1/c2', 'a2/b1/c1', 'a2/b1/c2']
	>>> list(tab.scan_keys('*/c1'))
	['a1/b1/c1', 'a1/b2/c1', 'a2/b1/c1', 'a2/b2/c1', 'a2/b3/c1']
	>>> list(tab.scan_keys('*/c3'))
	['a1/b2/c3']
	>>> list(tab.scan_keys('*/c4'))
	[]

	# scan_items

	>>> list(tab.scan_items('a1/b1/*'))
	[('a1/b1/c1', '1.1.1'), ('a1/b1/c2', '1.1.2')]
	>>> list(tab.scan_items('a1/b2/*'))
	[('a1/b2/c1', '1.2.1'), ('a1/b2/c2', '1.2.2'), ('a1/b2/c3', '1.2.3')]
	>>> list(tab.scan_items('a1/*'))
	[('a1/b1/c1', '1.1.1'), ('a1/b1/c2', '1.1.2'), ('a1/b2/c1', '1.2.1'), ('a1/b2/c2', '1.2.2'), ('a1/b2/c3', '1.2.3')]
	>>> list(tab.scan_items('a2/*'))
	[('a2/b1/c1', '2.1.1'), ('a2/b1/c2', '2.1.2'), ('a2/b2/c1', '2.2.1'), ('a2/b3/c1', '2.3.1')]
	>>> list(tab.scan_items('a2/b2/*'))
	[('a2/b2/c1', '2.2.1')]
	>>> list(tab.scan_items('a3/*'))
	[]
	>>> list(tab.scan_items('*'))
	[('a1/b1/c1', '1.1.1'), ('a1/b1/c2', '1.1.2'), ('a1/b2/c1', '1.2.1'), ('a1/b2/c2', '1.2.2'), ('a1/b2/c3', '1.2.3'), ('a2/b1/c1', '2.1.1'), ('a2/b1/c2', '2.1.2'), ('a2/b2/c1', '2.2.1'), ('a2/b3/c1', '2.3.1')]
	>>> list(tab.scan_items('*/b1/*'))
	[('a1/b1/c1', '1.1.1'), ('a1/b1/c2', '1.1.2'), ('a2/b1/c1', '2.1.1'), ('a2/b1/c2', '2.1.2')]
	>>> list(tab.scan_items('*/c1'))
	[('a1/b1/c1', '1.1.1'), ('a1/b2/c1', '1.2.1'), ('a2/b1/c1', '2.1.1'), ('a2/b2/c1', '2.2.1'), ('a2/b3/c1', '2.3.1')]
	>>> list(tab.scan_items('*/c3'))
	[('a1/b2/c3', '1.2.3')]
	>>> list(tab.scan_items('*/c4'))
	[]

# test_non_existing_table

	>>> db.drop('xyzzy')
	>>> db.drop('xyzzy')
	
	>>> db.get('xyzzy', 'x', -1)
	-1
	>>> db.get_many('xyzzy', ['x','y'], -1)
	[-1, -1]
	>>> db.get_items('xyzzy', ['x','y'], -1)
	[('x', -1), ('y', -1)]
	>>> list(db.keys('xyzzy'))
	[]
	>>> list(db.items('xyzzy'))
	[]
	>>> list(db.values('xyzzy'))
	[]
	>>> db.count('xyzzy')
	0
	>>> db.size('xyzzy')
	0
	>>> db.has('xyzzy', 'x')
	False
	
	>>> db.delete('xyzzy', 'y')


# test_table_names

	>>> db.drop('ΛλΨΩΦ♪♫')
	>>> db.drop('zażółć_gęślą_jaźń')
	>>> db.drop('zażółć gęślą jaźń')
	>>> db.drop('ZAŻÓŁĆ GĘŚLĄ JAŹŃ')
	>>> db.drop('aa')
	>>> db.drop('Aa')
	>>> db.drop('aA')
	>>> db.drop('AA')
	>>> db.drop('0')
	>>> db.drop('_')
	>>> db.drop('λ')
	>>> db.drop(' ')
	>>> db.drop('a/b')
	>>> db.drop('a:b')
	>>> db.drop('a;b')
	>>> db.drop('a.b')
	>>> db.drop('a,b')
	>>> db.drop('a#b')
	>>> db.drop('a@b')
	>>> db.drop('a!b')
	>>> db.drop('a$b')
	>>> db.drop('a^b')
	>>> db.drop('a-b')
	>>> db.drop('a=b')

	>>> db.put('ΛλΨΩΦ♪♫', 'x', 1)
	>>> db.get('ΛλΨΩΦ♪♫', 'x')
	1
	
	>>> db.put('zażółć gęślą jaźń', 'x', 2)
	>>> db.get('zażółć gęślą jaźń', 'x')
	2

	>>> db.put('zażółć_gęślą_jaźń', 'x', 3)
	>>> db.get('zażółć_gęślą_jaźń', 'x')
	3
	
	>>> db.put('ZAŻÓŁĆ GĘŚLĄ JAŹŃ', 'y', 4)
	>>> db.get('ZAŻÓŁĆ GĘŚLĄ JAŹŃ', 'y')
	4
	>>> db.get('ZAŻÓŁĆ GĘŚLĄ JAŹŃ', 'x', -1)
	-1
	
	>>> tables = set(db.tables())
	>>> 'ΛλΨΩΦ♪♫' in tables
	True
	>>> 'zażółć gęślą jaźń' in tables
	True
	>>> 'ZAŻÓŁĆ GĘŚLĄ JAŹŃ' in tables
	True

	>>> db.put('aa', 'v', 11)
	>>> db.put('Aa', 'x', 21)
	>>> db.put('aA', 'y', 12)
	>>> db.put('AA', 'z', 22)

	>>> db.count('aa')
	1
	>>> db.count('Aa')
	1
	>>> db.count('aA')
	1
	>>> db.count('AA')
	1
	>>> len( set(db.tables()) & set(['aa','Aa','aA','AA']) )
	4

	>>> db.put('0', 'x', 123)
	>>> db.put('_', 'x', 123)
	>>> db.put('λ', 'x', 123)
	>>> db.put(' ', 'x', 123)

	>>> len( set(db.tables()) & set(['0','_','λ',' ']) )
	4

	>>> db.put('x0', 'x', 123)
	>>> db.put('x_', 'x', 123)
	>>> db.put('xλ', 'x', 123)
	>>> db.put('x ', 'x', 123)

	>>> len( set(db.tables()) & set(['x0','x_','xλ','x ']) )
	4
	
	>>> db.put('a/b', 'x', 1)
	>>> db.get('a/b', 'x', 0)
	1
	>>> db.put('a:b', 'x', 1)
	>>> db.get('a:b', 'x', 0)
	1
	>>> db.put('a;b', 'x', 1)
	>>> db.get('a;b', 'x', 0)
	1
	>>> db.put('a.b', 'x', 1)
	>>> db.get('a.b', 'x', 0)
	1
	>>> db.put('a,b', 'x', 1)
	>>> db.get('a,b', 'x', 0)
	1
	>>> db.put('a#b', 'x', 1)
	>>> db.get('a#b', 'x', 0)
	1
	>>> db.put('a@b', 'x', 1)
	>>> db.get('a@b', 'x', 0)
	1
	>>> db.put('a!b', 'x', 1)
	>>> db.get('a!b', 'x', 0)
	1
	>>> db.put('a$b', 'x', 1)
	>>> db.get('a$b', 'x', 0)
	1
	>>> db.put('a^b', 'x', 1)
	>>> db.get('a^b', 'x', 0)
	1
	>>> db.put('a-b', 'x', 1)
	>>> db.get('a-b', 'x', 0)
	1
	>>> db.put('a=b', 'x', 1)
	>>> db.get('a=b', 'x', 0)
	1

# test_group_keys



# test_dumps_loads

	# !!! this must be the last test set as it changes the dumps/loads functions !!!

	>>> import cloudpickle
	>>> db.dumps = cloudpickle.dumps
	>>> db.loads = cloudpickle.loads
	
	>>> def foo(x): return x+1
	>>> foo(1)
	2
	>>> db.put('fun', 'foo', foo)
	>>> bar = db.get('fun', 'foo')
	>>> bar(1)
	2
	
	>>> db.put('fun', 'baz', lambda x:x+2)
	>>> db.get('fun', 'baz')(40)
	42

	>>> import json
	>>> import zlib
	>>> db.dumps = lambda x:zlib.compress(json.dumps(x).encode('utf8'))
	>>> db.loads = lambda x:json.loads(zlib.decompress(x).decode('utf8'))
	>>> db.drop('zip')
	>>> db.put('zip', 'x100k', 'x'*100_000)
	>>> db.size('zip') < 1_000
	True
	>>> len(db.get('zip','x100k'))
	100000

	# table + dumps + loads

	>>> db.put('t1', 'x', 1)
	>>> db.get('t1', 'x')
	1
	>>> db.dumps = lambda x:'A'+str(x)
	>>> db.loads = lambda x:x
	>>> db.put('t1', 'x', 2)
	>>> db.get('t1', 'x')
	'A2'
	>>> db.put('t2', 'x', 3)
	>>> db.get('t2', 'x')
	'A3'
	>>> t1 = db.table('t1', dumps=lambda x:'B'+str(x))
	>>> t1.put('x', 4)
	>>> t1.get('x')
	'B4'
	>>> db.get('t1','x')
	'B4'
	>>> db.put('t2','x',5)
	>>> db.get('t2','x')
	'A5'
	>>> t2 = db.table('t2', loads=lambda x:'C'+str(x))
	>>> t2.get('x')
	'CA5'
	>>> db.get('t2','x')
	'A5'

